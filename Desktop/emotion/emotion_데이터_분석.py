# -*- coding: utf-8 -*-
"""emotion 데이터 분석.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z49w6XujT6NWXKgvHBCaLoaxy9Kef1Ep
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

df = pd.read_csv('/한국교통안전공단_자동차결함 리콜현황_20221231.csv', encoding = 'cp949')

df

df['제작자'].unique()

df.isnull().sum()

df[df.duplicated(keep=False)]

print("Before:", len(df))
df = df.drop_duplicates()
print("After:", len(df))

df['start_year'] = df['생산기간(부터)'].str[:4].astype(int)
df['start_month'] = df['생산기간(부터)'].str[5:7].astype(int)
df['start_day'] = df['생산기간(부터)'].str[8:].astype(int)

df['end_year'] = df['생산기간(까지)'].str[:4].astype(int)
df['end_month'] = df['생산기간(까지)'].str[5:7].astype(int)
df['end_day'] = df['생산기간(까지)'].str[8:].astype(int)

df['recall_year'] = df['리콜개시일'].str[:4].astype(int)
df['recall_month'] = df['리콜개시일'].str[5:7].astype(int)
df['recall_day'] = df['리콜개시일'].str[8:].astype(int)

df

df = df.drop(columns=['생산기간(부터)', '생산기간(까지)', '리콜개시일']).rename(columns={'제작자': "manufacturer", "차명": "model", "리콜사유": "cause"})
df.head(3)

df.recall_year.min(), df.recall_year.max()

df.groupby("manufacturer").count()["model"].sort_values(ascending=False)

pd.DataFrame(df.groupby("manufacturer").count()["model"].sort_values(ascending=False)).rename(columns={"model": "count"})

tmp = pd.DataFrame(df.groupby("manufacturer").count()["model"].sort_values(ascending=False)).rename(columns={"model": "count"})

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

plt.figure(figsize=(15,10))

sns.set(font="NanumBarunGothic",
        rc={"axes.unicode_minus":False},
        style='darkgrid')
ax = sns.countplot(x="manufacturer", data=df, palette="Set2", order=tmp.index)
plt.xticks(rotation=80)
plt.show()

pd.DataFrame(df.groupby("model").count()["start_year"].sort_values(ascending=False)).rename(columns={"start_year": "count"}).head(10)

tmp = pd.DataFrame(df.groupby("model").count()["manufacturer"].sort_values(ascending=False))
tmp = tmp.rename(columns={"manufacturer": "count"}).iloc[:20]

plt.figure(figsize=(10,5))

# seaborn의 countplot 함수를 사용하여 출력합니다.
sns.set(font="NanumBarunGothic",
        rc={"axes.unicode_minus":False},
        style='darkgrid')
ax = sns.countplot(x="model", data=df[df.model.isin(tmp.index)], palette="Set2", order=tmp.index)
plt.xticks(rotation=80)
plt.show()

pd.DataFrame(df.groupby("recall_month").count()["start_year"].rename(index={"start_year": "count"}))

plt.figure(figsize=(10,5))

sns.set(style="darkgrid")
ax = sns.countplot(x="recall_month", data=df, palette="Set2")
plt.show()

tmp = pd.DataFrame(df.groupby("start_year").count()["model"]).rename(columns={"model": "count"}).reset_index()
tmp = tmp.astype(int)

# 그래프의 사이즈를 조절합니다.
plt.figure(figsize=(10,5))

# seaborn의 countplot 함수를 사용하여 출력합니다.
sns.set(style="darkgrid")
sns.lineplot(data=tmp, x="start_year", y="count")
plt.xticks(tmp["start_year"], rotation=45)
plt.show()

tmp['start_year'].isnull().sum()

tmp

print(tmp["start_year"].value_counts())

print(tmp["start_year"].dtype)

tmp = pd.DataFrame(df.groupby("recall_month").count()["start_year"].sort_values(ascending=False)).rename(columns={"start_year": "count"})
tmp.iloc[0]["count"]-tmp.iloc[-1]["count"]

df[df.recall_month.isin([10,11,12])].head()

plt.figure(figsize=(20,10))
sns.set(font="NanumBarunGothic",
        rc={"axes.unicode_minus":False},
        style='darkgrid')
ax = sns.countplot(x="manufacturer", data=df[df.recall_month.isin([10,11,12])], palette="Set2")
plt.xticks(rotation=80)
plt.show()